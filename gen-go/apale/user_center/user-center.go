// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user_center

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"user_center/gen-go/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
// Attributes:
//  - ID
//  - Username
//  - Password
//  - UserExtraID
type User struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Username string `thrift:"username,2,required" db:"username" json:"username"`
  Password string `thrift:"password,3,required" db:"password" json:"password"`
  UserExtraID int32 `thrift:"user_extra_id,4,required" db:"user_extra_id" json:"user_extra_id"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetID() int32 {
  return p.ID
}

func (p *User) GetUsername() string {
  return p.Username
}

func (p *User) GetPassword() string {
  return p.Password
}

func (p *User) GetUserExtraID() int32 {
  return p.UserExtraID
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetUsername bool = false;
  var issetPassword bool = false;
  var issetUserExtraID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetUsername = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetPassword = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetUserExtraID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  if !issetPassword{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Password is not set"));
  }
  if !issetUserExtraID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserExtraID is not set"));
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserExtraID = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_extra_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_extra_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserExtraID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_extra_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_extra_id: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - ID
//  - Nickname
//  - Email
//  - PhoneNumber
type UserExtra struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Nickname string `thrift:"nickname,2,required" db:"nickname" json:"nickname"`
  Email string `thrift:"email,3,required" db:"email" json:"email"`
  PhoneNumber string `thrift:"phone_number,4,required" db:"phone_number" json:"phone_number"`
}

func NewUserExtra() *UserExtra {
  return &UserExtra{}
}


func (p *UserExtra) GetID() int32 {
  return p.ID
}

func (p *UserExtra) GetNickname() string {
  return p.Nickname
}

func (p *UserExtra) GetEmail() string {
  return p.Email
}

func (p *UserExtra) GetPhoneNumber() string {
  return p.PhoneNumber
}
func (p *UserExtra) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetNickname bool = false;
  var issetEmail bool = false;
  var issetPhoneNumber bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetNickname = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetEmail = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetPhoneNumber = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetNickname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nickname is not set"));
  }
  if !issetEmail{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Email is not set"));
  }
  if !issetPhoneNumber{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PhoneNumber is not set"));
  }
  return nil
}

func (p *UserExtra)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserExtra)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nickname = v
}
  return nil
}

func (p *UserExtra)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *UserExtra)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PhoneNumber = v
}
  return nil
}

func (p *UserExtra) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserExtra) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserExtra) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err) }
  if err := oprot.WriteString(string(p.Nickname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err) }
  return err
}

func (p *UserExtra) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *UserExtra) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone_number", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone_number: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone_number (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone_number: ", p), err) }
  return err
}

func (p *UserExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserExtra(%+v)", *p)
}

// Attributes:
//  - User
//  - UserExtra
//  - Base
type RegisterRequest struct {
  User *User `thrift:"user,1,required" db:"user" json:"user"`
  UserExtra *UserExtra `thrift:"user_extra,2,required" db:"user_extra" json:"user_extra"`
  // unused fields # 3 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewRegisterRequest() *RegisterRequest {
  return &RegisterRequest{}
}

var RegisterRequest_User_DEFAULT *User
func (p *RegisterRequest) GetUser() *User {
  if !p.IsSetUser() {
    return RegisterRequest_User_DEFAULT
  }
return p.User
}
var RegisterRequest_UserExtra_DEFAULT *UserExtra
func (p *RegisterRequest) GetUserExtra() *UserExtra {
  if !p.IsSetUserExtra() {
    return RegisterRequest_UserExtra_DEFAULT
  }
return p.UserExtra
}
var RegisterRequest_Base_DEFAULT *base.Base
func (p *RegisterRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return RegisterRequest_Base_DEFAULT
  }
return p.Base
}
func (p *RegisterRequest) IsSetUser() bool {
  return p.User != nil
}

func (p *RegisterRequest) IsSetUserExtra() bool {
  return p.UserExtra != nil
}

func (p *RegisterRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *RegisterRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUser bool = false;
  var issetUserExtra bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUser = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetUserExtra = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUser{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field User is not set"));
  }
  if !issetUserExtra{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserExtra is not set"));
  }
  return nil
}

func (p *RegisterRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.User = &User{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *RegisterRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.UserExtra = &UserExtra{}
  if err := p.UserExtra.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserExtra), err)
  }
  return nil
}

func (p *RegisterRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *RegisterRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *RegisterRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_extra", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_extra: ", p), err) }
  if err := p.UserExtra.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserExtra), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_extra: ", p), err) }
  return err
}

func (p *RegisterRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *RegisterRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterRequest(%+v)", *p)
}

// Attributes:
//  - ID
//  - BaseResp
type RegisterResponse struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"base_resp,255" db:"base_resp" json:"base_resp"`
}

func NewRegisterResponse() *RegisterResponse {
  return &RegisterResponse{}
}


func (p *RegisterResponse) GetID() int32 {
  return p.ID
}
var RegisterResponse_BaseResp_DEFAULT *base.BaseResp
func (p *RegisterResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return RegisterResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *RegisterResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *RegisterResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *RegisterResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RegisterResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *RegisterResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *RegisterResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base_resp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base_resp: ", p), err) }
  return err
}

func (p *RegisterResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterResponse(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
//  - Base
type LoginRequest struct {
  Username string `thrift:"username,1,required" db:"username" json:"username"`
  Password string `thrift:"password,2,required" db:"password" json:"password"`
  // unused fields # 3 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewLoginRequest() *LoginRequest {
  return &LoginRequest{}
}


func (p *LoginRequest) GetUsername() string {
  return p.Username
}

func (p *LoginRequest) GetPassword() string {
  return p.Password
}
var LoginRequest_Base_DEFAULT *base.Base
func (p *LoginRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return LoginRequest_Base_DEFAULT
  }
return p.Base
}
func (p *LoginRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *LoginRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUsername bool = false;
  var issetPassword bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUsername = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetPassword = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUsername{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"));
  }
  if !issetPassword{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Password is not set"));
  }
  return nil
}

func (p *LoginRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *LoginRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *LoginRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *LoginRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *LoginRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *LoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginRequest(%+v)", *p)
}

// Attributes:
//  - ID
//  - BaseResp
type LoginResponse struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"base_resp,255" db:"base_resp" json:"base_resp"`
}

func NewLoginResponse() *LoginResponse {
  return &LoginResponse{}
}


func (p *LoginResponse) GetID() int32 {
  return p.ID
}
var LoginResponse_BaseResp_DEFAULT *base.BaseResp
func (p *LoginResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return LoginResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *LoginResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *LoginResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *LoginResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *LoginResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *LoginResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *LoginResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base_resp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base_resp: ", p), err) }
  return err
}

func (p *LoginResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResponse(%+v)", *p)
}

// Attributes:
//  - ID
//  - Base
type LogoutRequest struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewLogoutRequest() *LogoutRequest {
  return &LogoutRequest{}
}


func (p *LogoutRequest) GetID() int32 {
  return p.ID
}
var LogoutRequest_Base_DEFAULT *base.Base
func (p *LogoutRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return LogoutRequest_Base_DEFAULT
  }
return p.Base
}
func (p *LogoutRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *LogoutRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *LogoutRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *LogoutRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *LogoutRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *LogoutRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *LogoutRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutRequest(%+v)", *p)
}

// Attributes:
//  - BaseResp
type LogoutResponse struct {
  // unused fields # 1 to 254
  BaseResp *base.BaseResp `thrift:"base_resp,255" db:"base_resp" json:"base_resp"`
}

func NewLogoutResponse() *LogoutResponse {
  return &LogoutResponse{}
}

var LogoutResponse_BaseResp_DEFAULT *base.BaseResp
func (p *LogoutResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return LogoutResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *LogoutResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *LogoutResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogoutResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *LogoutResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base_resp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base_resp: ", p), err) }
  return err
}

func (p *LogoutResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutResponse(%+v)", *p)
}

type UserCenter interface {
  // Parameters:
  //  - Req
  Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error)
  // Parameters:
  //  - Req
  Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error)
  // Parameters:
  //  - Req
  Logout(ctx context.Context, req *LogoutRequest) (r *LogoutResponse, err error)
}

type UserCenterClient struct {
  c thrift.TClient
}

func NewUserCenterClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserCenterClient {
  return &UserCenterClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserCenterClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserCenterClient {
  return &UserCenterClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserCenterClient(c thrift.TClient) *UserCenterClient {
  return &UserCenterClient{
    c: c,
  }
}

func (p *UserCenterClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *UserCenterClient) Register(ctx context.Context, req *RegisterRequest) (r *RegisterResponse, err error) {
  var _args0 UserCenterRegisterArgs
  _args0.Req = req
  var _result1 UserCenterRegisterResult
  if err = p.Client_().Call(ctx, "Register", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserCenterClient) Login(ctx context.Context, req *LoginRequest) (r *LoginResponse, err error) {
  var _args2 UserCenterLoginArgs
  _args2.Req = req
  var _result3 UserCenterLoginResult
  if err = p.Client_().Call(ctx, "Login", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *UserCenterClient) Logout(ctx context.Context, req *LogoutRequest) (r *LogoutResponse, err error) {
  var _args4 UserCenterLogoutArgs
  _args4.Req = req
  var _result5 UserCenterLogoutResult
  if err = p.Client_().Call(ctx, "Logout", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

type UserCenterProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserCenter
}

func (p *UserCenterProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserCenterProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserCenterProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserCenterProcessor(handler UserCenter) *UserCenterProcessor {

  self6 := &UserCenterProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["Register"] = &userCenterProcessorRegister{handler:handler}
  self6.processorMap["Login"] = &userCenterProcessorLogin{handler:handler}
  self6.processorMap["Logout"] = &userCenterProcessorLogout{handler:handler}
return self6
}

func (p *UserCenterProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type userCenterProcessorRegister struct {
  handler UserCenter
}

func (p *userCenterProcessorRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserCenterRegisterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Register", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserCenterRegisterResult{}
var retval *RegisterResponse
  var err2 error
  if retval, err2 = p.handler.Register(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Register: " + err2.Error())
    oprot.WriteMessageBegin("Register", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Register", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userCenterProcessorLogin struct {
  handler UserCenter
}

func (p *userCenterProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserCenterLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserCenterLoginResult{}
var retval *LoginResponse
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userCenterProcessorLogout struct {
  handler UserCenter
}

func (p *userCenterProcessorLogout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserCenterLogoutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserCenterLogoutResult{}
var retval *LogoutResponse
  var err2 error
  if retval, err2 = p.handler.Logout(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Logout: " + err2.Error())
    oprot.WriteMessageBegin("Logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Logout", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type UserCenterRegisterArgs struct {
  Req *RegisterRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserCenterRegisterArgs() *UserCenterRegisterArgs {
  return &UserCenterRegisterArgs{}
}

var UserCenterRegisterArgs_Req_DEFAULT *RegisterRequest
func (p *UserCenterRegisterArgs) GetReq() *RegisterRequest {
  if !p.IsSetReq() {
    return UserCenterRegisterArgs_Req_DEFAULT
  }
return p.Req
}
func (p *UserCenterRegisterArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *UserCenterRegisterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterRegisterArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &RegisterRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *UserCenterRegisterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Register_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *UserCenterRegisterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserCenterRegisterResult struct {
  Success *RegisterResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserCenterRegisterResult() *UserCenterRegisterResult {
  return &UserCenterRegisterResult{}
}

var UserCenterRegisterResult_Success_DEFAULT *RegisterResponse
func (p *UserCenterRegisterResult) GetSuccess() *RegisterResponse {
  if !p.IsSetSuccess() {
    return UserCenterRegisterResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserCenterRegisterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserCenterRegisterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterRegisterResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RegisterResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserCenterRegisterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Register_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserCenterRegisterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterRegisterResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserCenterLoginArgs struct {
  Req *LoginRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserCenterLoginArgs() *UserCenterLoginArgs {
  return &UserCenterLoginArgs{}
}

var UserCenterLoginArgs_Req_DEFAULT *LoginRequest
func (p *UserCenterLoginArgs) GetReq() *LoginRequest {
  if !p.IsSetReq() {
    return UserCenterLoginArgs_Req_DEFAULT
  }
return p.Req
}
func (p *UserCenterLoginArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *UserCenterLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &LoginRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *UserCenterLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *UserCenterLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserCenterLoginResult struct {
  Success *LoginResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserCenterLoginResult() *UserCenterLoginResult {
  return &UserCenterLoginResult{}
}

var UserCenterLoginResult_Success_DEFAULT *LoginResponse
func (p *UserCenterLoginResult) GetSuccess() *LoginResponse {
  if !p.IsSetSuccess() {
    return UserCenterLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserCenterLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserCenterLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LoginResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserCenterLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserCenterLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterLoginResult(%+v)", *p)
}

// Attributes:
//  - Req
type UserCenterLogoutArgs struct {
  Req *LogoutRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewUserCenterLogoutArgs() *UserCenterLogoutArgs {
  return &UserCenterLogoutArgs{}
}

var UserCenterLogoutArgs_Req_DEFAULT *LogoutRequest
func (p *UserCenterLogoutArgs) GetReq() *LogoutRequest {
  if !p.IsSetReq() {
    return UserCenterLogoutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *UserCenterLogoutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *UserCenterLogoutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterLogoutArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &LogoutRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *UserCenterLogoutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Logout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterLogoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *UserCenterLogoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterLogoutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserCenterLogoutResult struct {
  Success *LogoutResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserCenterLogoutResult() *UserCenterLogoutResult {
  return &UserCenterLogoutResult{}
}

var UserCenterLogoutResult_Success_DEFAULT *LogoutResponse
func (p *UserCenterLogoutResult) GetSuccess() *LogoutResponse {
  if !p.IsSetSuccess() {
    return UserCenterLogoutResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserCenterLogoutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserCenterLogoutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCenterLogoutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LogoutResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserCenterLogoutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Logout_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCenterLogoutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserCenterLogoutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCenterLogoutResult(%+v)", *p)
}


