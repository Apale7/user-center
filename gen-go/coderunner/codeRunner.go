// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package coderunner

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type CodeLanguage int64
const (
  CodeLanguage_Cpp CodeLanguage = 0
  CodeLanguage_Java CodeLanguage = 1
)

func (p CodeLanguage) String() string {
  switch p {
  case CodeLanguage_Cpp: return "Cpp"
  case CodeLanguage_Java: return "Java"
  }
  return "<UNSET>"
}

func CodeLanguageFromString(s string) (CodeLanguage, error) {
  switch s {
  case "Cpp": return CodeLanguage_Cpp, nil 
  case "Java": return CodeLanguage_Java, nil 
  }
  return CodeLanguage(0), fmt.Errorf("not a valid CodeLanguage string")
}


func CodeLanguagePtr(v CodeLanguage) *CodeLanguage { return &v }

func (p CodeLanguage) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CodeLanguage) UnmarshalText(text []byte) error {
q, err := CodeLanguageFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CodeLanguage) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CodeLanguage(v)
return nil
}

func (p * CodeLanguage) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResultType int64
const (
  ResultType_Sucess ResultType = 0
  ResultType_Compile_Error ResultType = 1
  ResultType_Runtime_Error ResultType = 2
  ResultType_Time_Limit_Exceeded ResultType = 3
  ResultType_Memory_Limit_Exceeded ResultType = 4
  ResultType_System_Error ResultType = 5
)

func (p ResultType) String() string {
  switch p {
  case ResultType_Sucess: return "Sucess"
  case ResultType_Compile_Error: return "Compile_Error"
  case ResultType_Runtime_Error: return "Runtime_Error"
  case ResultType_Time_Limit_Exceeded: return "Time_Limit_Exceeded"
  case ResultType_Memory_Limit_Exceeded: return "Memory_Limit_Exceeded"
  case ResultType_System_Error: return "System_Error"
  }
  return "<UNSET>"
}

func ResultTypeFromString(s string) (ResultType, error) {
  switch s {
  case "Sucess": return ResultType_Sucess, nil 
  case "Compile_Error": return ResultType_Compile_Error, nil 
  case "Runtime_Error": return ResultType_Runtime_Error, nil 
  case "Time_Limit_Exceeded": return ResultType_Time_Limit_Exceeded, nil 
  case "Memory_Limit_Exceeded": return ResultType_Memory_Limit_Exceeded, nil 
  case "System_Error": return ResultType_System_Error, nil 
  }
  return ResultType(0), fmt.Errorf("not a valid ResultType string")
}


func ResultTypePtr(v ResultType) *ResultType { return &v }

func (p ResultType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResultType) UnmarshalText(text []byte) error {
q, err := ResultTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResultType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResultType(v)
return nil
}

func (p * ResultType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Language_
//  - Code_
//  - Input_
type CodeRunnerRequest struct {
  Language_ CodeLanguage `thrift:"language_,1" db:"language_" json:"language_"`
  Code_ string `thrift:"code_,2" db:"code_" json:"code_"`
  Input_ string `thrift:"input_,3" db:"input_" json:"input_"`
}

func NewCodeRunnerRequest() *CodeRunnerRequest {
  return &CodeRunnerRequest{}
}


func (p *CodeRunnerRequest) GetLanguage_() CodeLanguage {
  return p.Language_
}

func (p *CodeRunnerRequest) GetCode_() string {
  return p.Code_
}

func (p *CodeRunnerRequest) GetInput_() string {
  return p.Input_
}
func (p *CodeRunnerRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CodeRunnerRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CodeLanguage(v)
  p.Language_ = temp
}
  return nil
}

func (p *CodeRunnerRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code_ = v
}
  return nil
}

func (p *CodeRunnerRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Input_ = v
}
  return nil
}

func (p *CodeRunnerRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("codeRunnerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CodeRunnerRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language_", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:language_: ", p), err) }
  if err := oprot.WriteI32(int32(p.Language_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:language_: ", p), err) }
  return err
}

func (p *CodeRunnerRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code_", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code_: ", p), err) }
  if err := oprot.WriteString(string(p.Code_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code_: ", p), err) }
  return err
}

func (p *CodeRunnerRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("input_", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:input_: ", p), err) }
  if err := oprot.WriteString(string(p.Input_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.input_ (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:input_: ", p), err) }
  return err
}

func (p *CodeRunnerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CodeRunnerRequest(%+v)", *p)
}

// Attributes:
//  - Type_
//  - Result_
type CodeRunnerRespone struct {
  Type_ ResultType `thrift:"type_,1" db:"type_" json:"type_"`
  Result_ string `thrift:"result_,2" db:"result_" json:"result_"`
}

func NewCodeRunnerRespone() *CodeRunnerRespone {
  return &CodeRunnerRespone{}
}


func (p *CodeRunnerRespone) GetType_() ResultType {
  return p.Type_
}

func (p *CodeRunnerRespone) GetResult_() string {
  return p.Result_
}
func (p *CodeRunnerRespone) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CodeRunnerRespone)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ResultType(v)
  p.Type_ = temp
}
  return nil
}

func (p *CodeRunnerRespone)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *CodeRunnerRespone) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("codeRunnerRespone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CodeRunnerRespone) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type_", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type_: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type_: ", p), err) }
  return err
}

func (p *CodeRunnerRespone) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result_", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result_: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result_ (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result_: ", p), err) }
  return err
}

func (p *CodeRunnerRespone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CodeRunnerRespone(%+v)", *p)
}

type CodeRunner interface {
  // Parameters:
  //  - Req
  Judge(ctx context.Context, req *CodeRunnerRequest) (r *CodeRunnerRespone, err error)
}

type CodeRunnerClient struct {
  c thrift.TClient
}

func NewCodeRunnerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CodeRunnerClient {
  return &CodeRunnerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCodeRunnerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CodeRunnerClient {
  return &CodeRunnerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCodeRunnerClient(c thrift.TClient) *CodeRunnerClient {
  return &CodeRunnerClient{
    c: c,
  }
}

func (p *CodeRunnerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *CodeRunnerClient) Judge(ctx context.Context, req *CodeRunnerRequest) (r *CodeRunnerRespone, err error) {
  var _args0 CodeRunnerJudgeArgs
  _args0.Req = req
  var _result1 CodeRunnerJudgeResult
  if err = p.Client_().Call(ctx, "judge", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type CodeRunnerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CodeRunner
}

func (p *CodeRunnerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CodeRunnerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CodeRunnerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCodeRunnerProcessor(handler CodeRunner) *CodeRunnerProcessor {

  self2 := &CodeRunnerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["judge"] = &codeRunnerProcessorJudge{handler:handler}
return self2
}

func (p *CodeRunnerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type codeRunnerProcessorJudge struct {
  handler CodeRunner
}

func (p *codeRunnerProcessorJudge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CodeRunnerJudgeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("judge", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CodeRunnerJudgeResult{}
var retval *CodeRunnerRespone
  var err2 error
  if retval, err2 = p.handler.Judge(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing judge: " + err2.Error())
    oprot.WriteMessageBegin("judge", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("judge", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type CodeRunnerJudgeArgs struct {
  Req *CodeRunnerRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewCodeRunnerJudgeArgs() *CodeRunnerJudgeArgs {
  return &CodeRunnerJudgeArgs{}
}

var CodeRunnerJudgeArgs_Req_DEFAULT *CodeRunnerRequest
func (p *CodeRunnerJudgeArgs) GetReq() *CodeRunnerRequest {
  if !p.IsSetReq() {
    return CodeRunnerJudgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *CodeRunnerJudgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *CodeRunnerJudgeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CodeRunnerJudgeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &CodeRunnerRequest{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *CodeRunnerJudgeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("judge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CodeRunnerJudgeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *CodeRunnerJudgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CodeRunnerJudgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CodeRunnerJudgeResult struct {
  Success *CodeRunnerRespone `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCodeRunnerJudgeResult() *CodeRunnerJudgeResult {
  return &CodeRunnerJudgeResult{}
}

var CodeRunnerJudgeResult_Success_DEFAULT *CodeRunnerRespone
func (p *CodeRunnerJudgeResult) GetSuccess() *CodeRunnerRespone {
  if !p.IsSetSuccess() {
    return CodeRunnerJudgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *CodeRunnerJudgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CodeRunnerJudgeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CodeRunnerJudgeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CodeRunnerRespone{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CodeRunnerJudgeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("judge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CodeRunnerJudgeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CodeRunnerJudgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CodeRunnerJudgeResult(%+v)", *p)
}


